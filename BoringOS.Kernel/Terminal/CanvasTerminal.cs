using System;
using System.Drawing;
using System.Runtime.CompilerServices;
using BoringOS.Terminal;
using Cosmos.Core.Multiboot;
using Cosmos.System;
using Cosmos.System.Graphics;
using Cosmos.System.Graphics.Fonts;
using Console = System.Console;

namespace BoringOS.Kernel.Terminal;

public class CanvasTerminal : ITerminal
{
    private readonly Canvas _canvas;

    private const string Font = "DAAMAAwADAAMAAwADAAMAAAAAAAcABwAAAAAAAAAAAA2ADYANgA2ADQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGwAbAD8AfwA2ADYAfwB/AGYAbgAkAAAAAAAAAAAADAA/AGwAbAB8AD4ADwAPAA8AbwB+ABwADAAAAAAAAAAAAHsA3gB+ACwADAAYABgANwA9gGcAYAAAAAAAAAAAAAAAPgA2ADYAPAA4AG2AZwDnAGcAfwAAAAAAAAAAAAAADAAMAAwADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOABgAGAAQADAAMAAwADAAMAA4ABgAGAAOAAYAAAAAADgADAAMAAYABgAGAAYABgAGAAYADAAMADgAMAAAAAAAAAAAACIANgAcAH8AfwAcADYANgAAAAAAAAAAAAAAAAAAAAAACAAIAD4APgAIAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAMABgAGAA4AAAAAAAAAAAAAAAAAAAAHAA+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABwAHAAAAAAAAAAAAAMAAwAGAAYADAAMABgAMAAwAGAAYABAAAAAAAAAAAAAAAA+AHMAZwBnAG8AewB7AHMAYwA+AAAAAAAAAAAAAAAAABwAPAAsAAwADAAMAAwADAAMAH8AAAAAAAAAAAAAAAAAPgBjAAMAAwAOABwAMABgAGAAfwAAAAAAAAAAAAAAAAA+AGMAAwAOAB4ABwADAAMAYwA+AAAAAAAAAAAAAAAAAA4ADgAeADYAdgB3AH8ABgAGAAYAAAAAAAAAAAAAAAAAfwBgAGAAfwBzAAMAAwADAGMAfgAAAAAAAAAAAAAAHgAwAGAAbAB/AGMAYwBjAGMAcwA+AAAAAAAAAAAAAAAAAH8AAwAGAAYADAAMABgAGAAwADAAIAAAAAAAAAAAAAAAPgBjAGMANgA+AHcAYwBjAGMAfgAAAAAAAAAAAAAAAAA+AGMAYwBjAGMAPwAfAAMABgAcADAAAAAAAAAAAAAAAAAAAAAAAAwAHAAAAAAADAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAwAAAAAAAgAHAAYABgAGAAAAAAAAAADAA4AHAA4AHAAcAA4ABwADgAHAAEAAAAAAAAAAAAAAAAAAAAAAD4AAAAAAD4AAAAAAAAAAAAAAAAAAAAAAAAAcAA4ABwADgAHAAMABgAcADgAcAAAAAAAAAAAAAAAAAA+ADMAAwAHAA4ADAAYAAAACAAcAAgAAAAAAAAAAAAAAD4AMwBjAG0AXYB1gPeA/wBbAGEAYwA+ABwAAAAAAAAADgAOAB4AHgAyADcAfwBjAGMAwYABAAAAAAAAAAAAAAB+AOYA4wDmAG4AfgBjAGMAZwB+AAAAAAAAAAAAAAADAB+AOYAwAGAAYABgAGAAYABjAD8AAAAAAAAAAAAAAAAAeADuAMcAYwBjAGGAYYBjgGMAfwAAAAAAAAAAAAAAAAB/AOAA4ABgAH8AfgBgAGAAYAB/AAAAAAAAAAAAAAAAAH8A4ADgAHgAfwBgAGAAYABgAGAAAAAAAAAAAAAAAAAAHwA4ADAAYABgAH+AYwBjAGYAPgAAAAAAAAAAAAAAAABjAGMAYwBjAH8AewBjAGMAYwBjAAAAAAAAAAAAAAAAAH8AHAAcABwAHAAcABwAHAAYAH8AAAAAAAAAAAAAAAAAfwAMAAwADAAMAAwATABsAGwAPAAAAAAAAAAAAAAAAABnAO4A/AB4AHAAcAB4AGwAZgBjAAAAAAAAAAAAAAAAAGAAYABgAGAAYABgAGAAYABgAH8AAAAAAAAAAAAAAAAAdwB3AHcAdwB3AF8AXwDdAN2A3YAAAAAAAAAAAAAAAABjAHEAcQB5AHkATQBNAEcARwBDAAAAAAAAAAAAAAAAAD4AcwBjAGMAYwBjAGMAYwBjAD4AAAAAAAAAAAAAAAAAfgBjAGMAYwBjAH4AfABgAGAAYAAAAAAAAAAAAAAAAAA+AHMAYwBjAGMAYwBjAGsAbwA+AAYAAwADAAAAAAAAAHwAbwBjAGMAYwB+AHgAbgBnAGMAAAAAAAAAAAAAAAAAPwBwAGAAcAA+AAMAAwADAGMAfgAAAAAAAAAAAAAAcAB/AAwADAAMAAwADAAMAAwADAAMAAAAAAAAAAAAAAAAAGGAYYBhgGGAYYBhgGGAYwBjAD4AAAAAAAAAAAAAAAAAwYBjAGMAYwA2ADYANgAcABwAHAAAAAAAAAAAAAAAAADdgN2A3YBdAF0AdQB3AHcAdwB3AAAAAAAAAAAAAAAAAGMAcwA2AD4AHAAcAB4ANgBnAGMAQQAAAAAAAAAAAAAA44BjAGMANgA+ABwAHAAYABgAMAAwAAAAAAAAAAAAAAB/AAcABgAMABwAGAAwADAAYAB/AAAAAAAAAAAAAAAwADAAMAAwADAAMAAwADAAMAAwADAAMAA+AAAAAAAAAGAAYAAwADAAGAAYAAwADAAGAAcAAwADAAAAAAAAAAAABwADAAMAAwADAAMAAwADAAMAAwADAAcAPgAAAAAAAABnAGOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB/AH8AAAAAAAAAHAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD8AMwBjAGMAYwBnAD8AAQAAAAAAAAAAAGAAYABgAGAAfwBjAGMAYwBjAGMAfgAAAAAAAAAAAAAAAAAAAAAAAAA+ADMAYABgAGAAYwA+AAAAAAAAAAAAAAADAAMAAwADAD8AYwBjAGMAYwBjAD8AAAAAAAAAAAAAAAAAAAAAAAAAPgBzAGcAfABwAGMAPwAAAAAAAAAAAAAADwAYABgAPgB+ABgAGAAYABgAGAB+AAAAAAAAAAAAAAAAAAAAAAAAAD8AMwBjAGMAYwBjAD8AAwADAAMABgB8AGAAYABgAGAAfwBzAHMAYwBjAGMAYwAAAAAAAAAAAAAAAAAcAAwAAAA8AAwADAAMAAwADAB/AAAAAAAAAAAAAAAAAAYABgAAADwAPgAGAAYABgAGAAYABgAGAAYADgB8AGAAYABgAGMAZgBsAHwAfABmAGcAYwAAAAAAAAAAAAAAPAAMAAwADAAMAAwADAAMAAwADAB/AAAAAAAAAAAAAAAAAAAAAAAAAH8AfwBvAGsAawBrAGsAAAAAAAAAAAAAAAAAAAAAAAAAfgBzAGMAYwBjAGMAYwAAAAAAAAAAAAAAAAAAAAAAAAA+AGMAYwBjAGMAZwA+AAAAAAAAAAAAAAAAAAAAAABgAH4AYwBjAGMAYwBjAH4AYABgAGAAYABgAAAAAAAAAAAAPwAzAGMAYwBjAHMAPwADAAMAAwADAAMAAAAAAAAAAAB/AHsAcABgAGAAYABgAAAAAAAAAAAAAAAAAAAAAAAAAD8AcwBwAB4AAwBjAH4AAAAAAAAAAAAAAAAAMAAwAH4AfgAwADAAMAAwADAAHwAAAAAAAAAAAAAAAAAAAAAAAABjAGMAYwBjAGMAZwA/AAAAAAAAAAAAAAAAAAAAAAAAAGMAYwBzADYANgAcABwAAAAAAAAAAAAAAAAAAAAAAAAAzYDdgH0AfwB3AHcANwAAAAAAAAAAAAAAAAAAAAAAAABjADYAPgAcABwANgBjAEEAAAAAAAAAAAAAAAAAAAAAAGOAYwBjADYANgAcABwAGAAYADgAMAAwAAAAAAAAAH4APwAGAA4AHAA4ADAAfwAAAAAAAAAAAAAAGAAYABgADAAcAHgADAAMAAwAGAAYAA4ABwAAAAAAAAAMAAwADAAMAAwADAAMAAwADAAMAAwADAAMAAwAAAAAAAwADAAYABgAHgAPABgAGAAMAAwADAA4AHAAAAAAAAAAAAAAAAAAAAB5AH8ATwAAAAAAAAAAAAAAAAAAAAAAAAA=";
    private const string FontCharset = "!\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~";
    private readonly byte[] _font;

    private const int CharHeight = 16;
    private const int CharWidth = 8;

    public CanvasTerminal()
    {
        Mode mode = new(800, 600, ColorDepth.ColorDepth32);

        this._font = Convert.FromBase64String(Font);

        if (VMTools.IsVMWare) this._canvas = new SVGAIICanvas(mode);
        else if (Multiboot2.IsVBEAvailable) this._canvas = new VBECanvas();
        else this._canvas = new VGACanvas();

        this.ClearScreen();
    }
    
    public ConsoleKeyInfo ReadKey()
    {
        return Console.ReadKey(true);
    }
    
    private void DrawChar(char c, Color color, int x, int y)
    {
        int index = FontCharset.IndexOf(c); // TODO: cache chars
        if (index == -1) return;
        
        const int size8 = CharHeight / 8;
        int sizePerFont = CharHeight * size8 * index;

        for (int column = 0; column < CharHeight; column++)
        {
            for (int row = 0; row < size8; row++)
            {
                for (int bitPos = 0; bitPos < 8; bitPos++)
                {
                    if ((this._font[sizePerFont + column * size8 + row] & (0x80 >> bitPos)) == 0) continue;
                    int max = row * 8 + bitPos;

                    this._canvas.DrawPoint(color, x + max, y + column);
                }
            }
        }
    }

    public int CursorX { get; set; }
    public int CursorY { get; set; }

    public int Width => (int)(this._canvas.Mode.Width / CharWidth);
    public int Height => (int)(this._canvas.Mode.Height / CharHeight);
    
    public void SetCursorPosition(int x, int y)
    {
        this.CursorX = x;
        this.CursorY = y;
    }

    public void WriteChar(char c, bool display)
    {
        if (c == '\n')
        {
            this.CursorX = 0;
            this.CursorY++;
            return;
        }

        if (c == ' ')
        {
            this.CursorX++;
            return;
        }
        
        this.DrawChar(c, Color.White, this.CursorX * CharWidth, this.CursorY * CharHeight);
        this.CursorX++;
        if(display) this._canvas.Display();
    }

    public void WriteChar(char c) => WriteChar(c, true);
    
    public void WriteString(string str)
    {
        foreach (char c in str) this.WriteChar(c, false);
        this._canvas.Display();
    }

    public void ClearLine(int skip = 0)
    {
        int x = this.CursorX * CharWidth;
        int y = this.CursorY * CharHeight;
        
        this._canvas.DrawFilledRectangle(Color.Black, x, y, this.Width - x, CharHeight);
    }

    public void ClearScreen()
    {
        this._canvas.Clear();
        this.SetCursorPosition(0, 0);
        this._canvas.Display();
    }
} 